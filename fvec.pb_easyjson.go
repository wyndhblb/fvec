// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package fvec

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	timeslab "github.com/wyndhblb/timeslab"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson94b24c72DecodeGithubComWyndhblbFvec(in *jlexer.Lexer, out *VMStrTPIntInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]*VTIntInt)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *VTIntInt
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(VTIntInt)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Vec)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec(out *jwriter.Writer, in VMStrTPIntInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Vec {
				if !v2First {
					out.RawByte(',')
				}
				v2First = false
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrTPIntInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrTPIntInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrTPIntInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrTPIntInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec1(in *jlexer.Lexer, out *VMStrTPIntStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]*VTIntStr)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 *VTIntStr
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(VTIntStr)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					(out.Vec)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec1(out *jwriter.Writer, in VMStrTPIntStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Vec {
				if !v4First {
					out.RawByte(',')
				}
				v4First = false
				out.String(string(v4Name))
				out.RawByte(':')
				if v4Value == nil {
					out.RawString("null")
				} else {
					(*v4Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrTPIntStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrTPIntStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrTPIntStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrTPIntStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec1(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec2(in *jlexer.Lexer, out *VMStrTPIntDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]*VTIntDbl)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 *VTIntDbl
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(VTIntDbl)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					(out.Vec)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec2(out *jwriter.Writer, in VMStrTPIntDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Vec {
				if !v6First {
					out.RawByte(',')
				}
				v6First = false
				out.String(string(v6Name))
				out.RawByte(':')
				if v6Value == nil {
					out.RawString("null")
				} else {
					(*v6Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrTPIntDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrTPIntDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrTPIntDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrTPIntDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec2(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec3(in *jlexer.Lexer, out *VMStrTPStrInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]*VTStrInt)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 *VTStrInt
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(VTStrInt)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					(out.Vec)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec3(out *jwriter.Writer, in VMStrTPStrInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Vec {
				if !v8First {
					out.RawByte(',')
				}
				v8First = false
				out.String(string(v8Name))
				out.RawByte(':')
				if v8Value == nil {
					out.RawString("null")
				} else {
					(*v8Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrTPStrInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrTPStrInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrTPStrInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrTPStrInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec3(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec4(in *jlexer.Lexer, out *VMStrTPStrStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]*VTStrStr)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 *VTStrStr
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(VTStrStr)
						}
						(*v9).UnmarshalEasyJSON(in)
					}
					(out.Vec)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec4(out *jwriter.Writer, in VMStrTPStrStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Vec {
				if !v10First {
					out.RawByte(',')
				}
				v10First = false
				out.String(string(v10Name))
				out.RawByte(':')
				if v10Value == nil {
					out.RawString("null")
				} else {
					(*v10Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrTPStrStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrTPStrStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrTPStrStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrTPStrStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec4(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec5(in *jlexer.Lexer, out *VMStrTPStrDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]*VTStrDbl)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 *VTStrDbl
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(VTStrDbl)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					(out.Vec)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec5(out *jwriter.Writer, in VMStrTPStrDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Vec {
				if !v12First {
					out.RawByte(',')
				}
				v12First = false
				out.String(string(v12Name))
				out.RawByte(':')
				if v12Value == nil {
					out.RawString("null")
				} else {
					(*v12Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrTPStrDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrTPStrDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrTPStrDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrTPStrDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec5(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec6(in *jlexer.Lexer, out *VMStrTPDblInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]*VTDblInt)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 *VTDblInt
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(VTDblInt)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					(out.Vec)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec6(out *jwriter.Writer, in VMStrTPDblInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.Vec {
				if !v14First {
					out.RawByte(',')
				}
				v14First = false
				out.String(string(v14Name))
				out.RawByte(':')
				if v14Value == nil {
					out.RawString("null")
				} else {
					(*v14Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrTPDblInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrTPDblInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrTPDblInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrTPDblInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec6(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec7(in *jlexer.Lexer, out *VMStrTPDblStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]*VTDblStr)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 *VTDblStr
					if in.IsNull() {
						in.Skip()
						v15 = nil
					} else {
						if v15 == nil {
							v15 = new(VTDblStr)
						}
						(*v15).UnmarshalEasyJSON(in)
					}
					(out.Vec)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec7(out *jwriter.Writer, in VMStrTPDblStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Vec {
				if !v16First {
					out.RawByte(',')
				}
				v16First = false
				out.String(string(v16Name))
				out.RawByte(':')
				if v16Value == nil {
					out.RawString("null")
				} else {
					(*v16Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrTPDblStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrTPDblStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrTPDblStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrTPDblStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec7(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec8(in *jlexer.Lexer, out *VMStrTPDblDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]*VTDblDbl)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v17 *VTDblDbl
					if in.IsNull() {
						in.Skip()
						v17 = nil
					} else {
						if v17 == nil {
							v17 = new(VTDblDbl)
						}
						(*v17).UnmarshalEasyJSON(in)
					}
					(out.Vec)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec8(out *jwriter.Writer, in VMStrTPDblDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Vec {
				if !v18First {
					out.RawByte(',')
				}
				v18First = false
				out.String(string(v18Name))
				out.RawByte(':')
				if v18Value == nil {
					out.RawString("null")
				} else {
					(*v18Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrTPDblDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrTPDblDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrTPDblDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrTPDblDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec8(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec9(in *jlexer.Lexer, out *VMStrInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]int64)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 int64
					v19 = int64(in.Int64())
					(out.Vec)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec9(out *jwriter.Writer, in VMStrInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Vec {
				if !v20First {
					out.RawByte(',')
				}
				v20First = false
				out.String(string(v20Name))
				out.RawByte(':')
				out.Int64(int64(v20Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec9(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec10(in *jlexer.Lexer, out *VMStrStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]string)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 string
					v21 = string(in.String())
					(out.Vec)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec10(out *jwriter.Writer, in VMStrStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Vec {
				if !v22First {
					out.RawByte(',')
				}
				v22First = false
				out.String(string(v22Name))
				out.RawByte(':')
				out.String(string(v22Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec10(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec11(in *jlexer.Lexer, out *VMStrDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vec = make(map[string]float64)
				} else {
					out.Vec = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 float64
					v23 = float64(in.Float64())
					(out.Vec)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec11(out *jwriter.Writer, in VMStrDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Vec {
				if !v24First {
					out.RawByte(',')
				}
				v24First = false
				out.String(string(v24Name))
				out.RawByte(':')
				out.Float64(float64(v24Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VMStrDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VMStrDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VMStrDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VMStrDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec11(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec12(in *jlexer.Lexer, out *VSIntInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTIntInt, 0, 8)
				} else {
					out.Vec = []*VTIntInt{}
				}
				for !in.IsDelim(']') {
					var v25 *VTIntInt
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(VTIntInt)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec12(out *jwriter.Writer, in VSIntInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Vec {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					(*v27).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSIntInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSIntInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSIntInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSIntInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec12(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec13(in *jlexer.Lexer, out *VSIntStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTIntStr, 0, 8)
				} else {
					out.Vec = []*VTIntStr{}
				}
				for !in.IsDelim(']') {
					var v28 *VTIntStr
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(VTIntStr)
						}
						(*v28).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec13(out *jwriter.Writer, in VSIntStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Vec {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					(*v30).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSIntStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSIntStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSIntStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSIntStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec13(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec14(in *jlexer.Lexer, out *VSIntDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTIntDbl, 0, 8)
				} else {
					out.Vec = []*VTIntDbl{}
				}
				for !in.IsDelim(']') {
					var v31 *VTIntDbl
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(VTIntDbl)
						}
						(*v31).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec14(out *jwriter.Writer, in VSIntDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Vec {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					(*v33).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSIntDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSIntDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSIntDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSIntDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec14(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec15(in *jlexer.Lexer, out *VSStrInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTStrInt, 0, 8)
				} else {
					out.Vec = []*VTStrInt{}
				}
				for !in.IsDelim(']') {
					var v34 *VTStrInt
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(VTStrInt)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec15(out *jwriter.Writer, in VSStrInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Vec {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil {
					out.RawString("null")
				} else {
					(*v36).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSStrInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSStrInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSStrInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSStrInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec15(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec16(in *jlexer.Lexer, out *VSStrStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTStrStr, 0, 8)
				} else {
					out.Vec = []*VTStrStr{}
				}
				for !in.IsDelim(']') {
					var v37 *VTStrStr
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(VTStrStr)
						}
						(*v37).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec16(out *jwriter.Writer, in VSStrStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Vec {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					(*v39).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSStrStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSStrStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSStrStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSStrStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec16(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec17(in *jlexer.Lexer, out *VSStrDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTStrDbl, 0, 8)
				} else {
					out.Vec = []*VTStrDbl{}
				}
				for !in.IsDelim(']') {
					var v40 *VTStrDbl
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						if v40 == nil {
							v40 = new(VTStrDbl)
						}
						(*v40).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec17(out *jwriter.Writer, in VSStrDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Vec {
				if v41 > 0 {
					out.RawByte(',')
				}
				if v42 == nil {
					out.RawString("null")
				} else {
					(*v42).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSStrDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSStrDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSStrDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSStrDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec17(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec18(in *jlexer.Lexer, out *VSDblInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTDblInt, 0, 8)
				} else {
					out.Vec = []*VTDblInt{}
				}
				for !in.IsDelim(']') {
					var v43 *VTDblInt
					if in.IsNull() {
						in.Skip()
						v43 = nil
					} else {
						if v43 == nil {
							v43 = new(VTDblInt)
						}
						(*v43).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec18(out *jwriter.Writer, in VSDblInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Vec {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil {
					out.RawString("null")
				} else {
					(*v45).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSDblInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSDblInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSDblInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSDblInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec18(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec19(in *jlexer.Lexer, out *VSDblStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTDblStr, 0, 8)
				} else {
					out.Vec = []*VTDblStr{}
				}
				for !in.IsDelim(']') {
					var v46 *VTDblStr
					if in.IsNull() {
						in.Skip()
						v46 = nil
					} else {
						if v46 == nil {
							v46 = new(VTDblStr)
						}
						(*v46).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec19(out *jwriter.Writer, in VSDblStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Vec {
				if v47 > 0 {
					out.RawByte(',')
				}
				if v48 == nil {
					out.RawString("null")
				} else {
					(*v48).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSDblStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSDblStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSDblStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSDblStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec19(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec20(in *jlexer.Lexer, out *VSDblDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTDblDbl, 0, 8)
				} else {
					out.Vec = []*VTDblDbl{}
				}
				for !in.IsDelim(']') {
					var v49 *VTDblDbl
					if in.IsNull() {
						in.Skip()
						v49 = nil
					} else {
						if v49 == nil {
							v49 = new(VTDblDbl)
						}
						(*v49).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec20(out *jwriter.Writer, in VSDblDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Vec {
				if v50 > 0 {
					out.RawByte(',')
				}
				if v51 == nil {
					out.RawString("null")
				} else {
					(*v51).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSDblDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSDblDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSDblDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSDblDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec20(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec21(in *jlexer.Lexer, out *VSInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]int64, 0, 8)
				} else {
					out.Vec = []int64{}
				}
				for !in.IsDelim(']') {
					var v52 int64
					v52 = int64(in.Int64())
					out.Vec = append(out.Vec, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec21(out *jwriter.Writer, in VSInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Vec {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v54))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec21(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec22(in *jlexer.Lexer, out *VSStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]string, 0, 4)
				} else {
					out.Vec = []string{}
				}
				for !in.IsDelim(']') {
					var v55 string
					v55 = string(in.String())
					out.Vec = append(out.Vec, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec22(out *jwriter.Writer, in VSStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Vec {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec22(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec23(in *jlexer.Lexer, out *VSDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]float64, 0, 8)
				} else {
					out.Vec = []float64{}
				}
				for !in.IsDelim(']') {
					var v58 float64
					v58 = float64(in.Float64())
					out.Vec = append(out.Vec, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec23(out *jwriter.Writer, in VSDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Vec {
				if v59 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v60))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VSDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VSDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VSDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VSDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec23(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec24(in *jlexer.Lexer, out *VLIntInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTIntInt, 0, 8)
				} else {
					out.Vec = []*VTIntInt{}
				}
				for !in.IsDelim(']') {
					var v61 *VTIntInt
					if in.IsNull() {
						in.Skip()
						v61 = nil
					} else {
						if v61 == nil {
							v61 = new(VTIntInt)
						}
						(*v61).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec24(out *jwriter.Writer, in VLIntInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.Vec {
				if v62 > 0 {
					out.RawByte(',')
				}
				if v63 == nil {
					out.RawString("null")
				} else {
					(*v63).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLIntInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLIntInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLIntInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLIntInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec24(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec25(in *jlexer.Lexer, out *VLIntStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTIntStr, 0, 8)
				} else {
					out.Vec = []*VTIntStr{}
				}
				for !in.IsDelim(']') {
					var v64 *VTIntStr
					if in.IsNull() {
						in.Skip()
						v64 = nil
					} else {
						if v64 == nil {
							v64 = new(VTIntStr)
						}
						(*v64).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec25(out *jwriter.Writer, in VLIntStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Vec {
				if v65 > 0 {
					out.RawByte(',')
				}
				if v66 == nil {
					out.RawString("null")
				} else {
					(*v66).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLIntStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLIntStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLIntStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLIntStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec25(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec26(in *jlexer.Lexer, out *VLIntDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTIntDbl, 0, 8)
				} else {
					out.Vec = []*VTIntDbl{}
				}
				for !in.IsDelim(']') {
					var v67 *VTIntDbl
					if in.IsNull() {
						in.Skip()
						v67 = nil
					} else {
						if v67 == nil {
							v67 = new(VTIntDbl)
						}
						(*v67).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec26(out *jwriter.Writer, in VLIntDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.Vec {
				if v68 > 0 {
					out.RawByte(',')
				}
				if v69 == nil {
					out.RawString("null")
				} else {
					(*v69).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLIntDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLIntDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLIntDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLIntDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec26(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec27(in *jlexer.Lexer, out *VLStrInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTStrInt, 0, 8)
				} else {
					out.Vec = []*VTStrInt{}
				}
				for !in.IsDelim(']') {
					var v70 *VTStrInt
					if in.IsNull() {
						in.Skip()
						v70 = nil
					} else {
						if v70 == nil {
							v70 = new(VTStrInt)
						}
						(*v70).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec27(out *jwriter.Writer, in VLStrInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v71, v72 := range in.Vec {
				if v71 > 0 {
					out.RawByte(',')
				}
				if v72 == nil {
					out.RawString("null")
				} else {
					(*v72).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLStrInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLStrInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLStrInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLStrInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec27(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec28(in *jlexer.Lexer, out *VLStrStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTStrStr, 0, 8)
				} else {
					out.Vec = []*VTStrStr{}
				}
				for !in.IsDelim(']') {
					var v73 *VTStrStr
					if in.IsNull() {
						in.Skip()
						v73 = nil
					} else {
						if v73 == nil {
							v73 = new(VTStrStr)
						}
						(*v73).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec28(out *jwriter.Writer, in VLStrStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v74, v75 := range in.Vec {
				if v74 > 0 {
					out.RawByte(',')
				}
				if v75 == nil {
					out.RawString("null")
				} else {
					(*v75).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLStrStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLStrStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLStrStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLStrStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec28(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec29(in *jlexer.Lexer, out *VLStrDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTStrDbl, 0, 8)
				} else {
					out.Vec = []*VTStrDbl{}
				}
				for !in.IsDelim(']') {
					var v76 *VTStrDbl
					if in.IsNull() {
						in.Skip()
						v76 = nil
					} else {
						if v76 == nil {
							v76 = new(VTStrDbl)
						}
						(*v76).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec29(out *jwriter.Writer, in VLStrDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v77, v78 := range in.Vec {
				if v77 > 0 {
					out.RawByte(',')
				}
				if v78 == nil {
					out.RawString("null")
				} else {
					(*v78).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLStrDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLStrDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLStrDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLStrDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec29(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec30(in *jlexer.Lexer, out *VLDblInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTDblInt, 0, 8)
				} else {
					out.Vec = []*VTDblInt{}
				}
				for !in.IsDelim(']') {
					var v79 *VTDblInt
					if in.IsNull() {
						in.Skip()
						v79 = nil
					} else {
						if v79 == nil {
							v79 = new(VTDblInt)
						}
						(*v79).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec30(out *jwriter.Writer, in VLDblInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.Vec {
				if v80 > 0 {
					out.RawByte(',')
				}
				if v81 == nil {
					out.RawString("null")
				} else {
					(*v81).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLDblInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLDblInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLDblInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLDblInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec30(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec31(in *jlexer.Lexer, out *VLDblStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTDblStr, 0, 8)
				} else {
					out.Vec = []*VTDblStr{}
				}
				for !in.IsDelim(']') {
					var v82 *VTDblStr
					if in.IsNull() {
						in.Skip()
						v82 = nil
					} else {
						if v82 == nil {
							v82 = new(VTDblStr)
						}
						(*v82).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec31(out *jwriter.Writer, in VLDblStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v83, v84 := range in.Vec {
				if v83 > 0 {
					out.RawByte(',')
				}
				if v84 == nil {
					out.RawString("null")
				} else {
					(*v84).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLDblStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLDblStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLDblStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLDblStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec31(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec32(in *jlexer.Lexer, out *VLDblDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]*VTDblDbl, 0, 8)
				} else {
					out.Vec = []*VTDblDbl{}
				}
				for !in.IsDelim(']') {
					var v85 *VTDblDbl
					if in.IsNull() {
						in.Skip()
						v85 = nil
					} else {
						if v85 == nil {
							v85 = new(VTDblDbl)
						}
						(*v85).UnmarshalEasyJSON(in)
					}
					out.Vec = append(out.Vec, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec32(out *jwriter.Writer, in VLDblDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v86, v87 := range in.Vec {
				if v86 > 0 {
					out.RawByte(',')
				}
				if v87 == nil {
					out.RawString("null")
				} else {
					(*v87).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLDblDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLDblDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLDblDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLDblDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec32(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec33(in *jlexer.Lexer, out *VLInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]int64, 0, 8)
				} else {
					out.Vec = []int64{}
				}
				for !in.IsDelim(']') {
					var v88 int64
					v88 = int64(in.Int64())
					out.Vec = append(out.Vec, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec33(out *jwriter.Writer, in VLInt) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.Vec {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v90))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec33(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec34(in *jlexer.Lexer, out *VLStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]string, 0, 4)
				} else {
					out.Vec = []string{}
				}
				for !in.IsDelim(']') {
					var v91 string
					v91 = string(in.String())
					out.Vec = append(out.Vec, v91)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec34(out *jwriter.Writer, in VLStr) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v92, v93 := range in.Vec {
				if v92 > 0 {
					out.RawByte(',')
				}
				out.String(string(v93))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec34(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec35(in *jlexer.Lexer, out *VLDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vec":
			if in.IsNull() {
				in.Skip()
				out.Vec = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Vec = make([]float64, 0, 8)
				} else {
					out.Vec = []float64{}
				}
				for !in.IsDelim(']') {
					var v94 float64
					v94 = float64(in.Float64())
					out.Vec = append(out.Vec, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec35(out *jwriter.Writer, in VLDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Vec) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"vec\":")
		if in.Vec == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v95, v96 := range in.Vec {
				if v95 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v96))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VLDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VLDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VLDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VLDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec35(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec36(in *jlexer.Lexer, out *VTIntInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = int64(in.Int64())
		case "value":
			out.Value = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec36(out *jwriter.Writer, in VTIntInt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		out.Int64(int64(in.Key))
	}
	if in.Value != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.Int64(int64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VTIntInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VTIntInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VTIntInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VTIntInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec36(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec37(in *jlexer.Lexer, out *VTIntStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = int64(in.Int64())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec37(out *jwriter.Writer, in VTIntStr) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		out.Int64(int64(in.Key))
	}
	if in.Value != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VTIntStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VTIntStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VTIntStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VTIntStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec37(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec38(in *jlexer.Lexer, out *VTIntDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = int64(in.Int64())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec38(out *jwriter.Writer, in VTIntDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		out.Int64(int64(in.Key))
	}
	if in.Value != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VTIntDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VTIntDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VTIntDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VTIntDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec38(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec39(in *jlexer.Lexer, out *VTStrInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec39(out *jwriter.Writer, in VTStrInt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		out.String(string(in.Key))
	}
	if in.Value != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.Int64(int64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VTStrInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VTStrInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VTStrInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VTStrInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec39(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec40(in *jlexer.Lexer, out *VTStrStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec40(out *jwriter.Writer, in VTStrStr) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		out.String(string(in.Key))
	}
	if in.Value != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VTStrStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VTStrStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VTStrStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VTStrStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec40(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec41(in *jlexer.Lexer, out *VTStrDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec41(out *jwriter.Writer, in VTStrDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		out.String(string(in.Key))
	}
	if in.Value != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VTStrDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VTStrDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VTStrDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VTStrDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec41(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec42(in *jlexer.Lexer, out *VTDblInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = float64(in.Float64())
		case "value":
			out.Value = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec42(out *jwriter.Writer, in VTDblInt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		out.Float64(float64(in.Key))
	}
	if in.Value != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.Int64(int64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VTDblInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VTDblInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VTDblInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VTDblInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec42(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec43(in *jlexer.Lexer, out *VTDblStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = float64(in.Float64())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec43(out *jwriter.Writer, in VTDblStr) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		out.Float64(float64(in.Key))
	}
	if in.Value != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VTDblStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VTDblStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VTDblStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VTDblStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec43(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec44(in *jlexer.Lexer, out *VTDblDbl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = float64(in.Float64())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec44(out *jwriter.Writer, in VTDblDbl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		out.Float64(float64(in.Key))
	}
	if in.Value != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VTDblDbl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VTDblDbl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VTDblDbl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VTDblDbl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec44(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec45(in *jlexer.Lexer, out *VName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "resolution":
			out.Resolution = timeslab.Resolution(in.Int32())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		case "time":
			out.Time = int64(in.Int64())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*Tag, 0, 8)
				} else {
					out.Tags = []*Tag{}
				}
				for !in.IsDelim(']') {
					var v97 *Tag
					if in.IsNull() {
						in.Skip()
						v97 = nil
					} else {
						if v97 == nil {
							v97 = new(Tag)
						}
						(*v97).UnmarshalEasyJSON(in)
					}
					out.Tags = append(out.Tags, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec45(out *jwriter.Writer, in VName) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		out.String(string(in.Key))
	}
	if in.Resolution != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"resolution\":")
		out.Int32(int32(in.Resolution))
	}
	if in.Ttl != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ttl\":")
		out.Uint32(uint32(in.Ttl))
	}
	if in.Time != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.Int64(int64(in.Time))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v98, v99 := range in.Tags {
				if v98 > 0 {
					out.RawByte(',')
				}
				if v99 == nil {
					out.RawString("null")
				} else {
					(*v99).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec45(l, v)
}
func easyjson94b24c72DecodeGithubComWyndhblbFvec46(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94b24c72EncodeGithubComWyndhblbFvec46(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Value != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94b24c72EncodeGithubComWyndhblbFvec46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94b24c72EncodeGithubComWyndhblbFvec46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94b24c72DecodeGithubComWyndhblbFvec46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94b24c72DecodeGithubComWyndhblbFvec46(l, v)
}
